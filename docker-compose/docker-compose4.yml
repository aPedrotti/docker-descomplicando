version: "3.7"
services:
  redis:
    image: redis:alpine
    networks:
      - frontend
    ports:
      - "6379"
    deploy:
      replicas: 2
      restart_policy:
        condition: on-failure
      update_config: 
        parallelism: 2
        delay: 10s
        order: start-first
      rollback_config: #Available from v 3.7
        parallelism: 1
        delay: 120s
        failure_action: continue
        monitor: 60s
        order: stop-first
  
  db:
    image: postgres:9.4
    environment:
    #  POSTGRES_PASSWORD: "postgres"
      POSTGRES_HOST_AUTH_METHOD: trust
    volumes:
      - db_data:/var/lib/postgresql/data
    networks:
      - backend
    deploy:
      placement:
        constraints: [node.role == manager]
  
  vote:
    depends_on:
      - redis
    image: dockersamples/examplevotingapp_vote:before
    networks:
      - frontend
    ports:
      - "5000:80"
    deploy:
      replicas: 2
      restart_policy:
        condition: on-failure
      update_config: 
        parallelism: 2
        delay: 10s
  
  result:
    depends_on:
      - db
    image: dockersamples/examplevotingapp_result:before
    networks:
      - backend
    ports:
      - "5001:80"
    deploy:
      replicas: 1
      restart_policy:
        condition: on-failure
      update_config: 
        parallelism: 2
        delay: 10s
  
  worker:
    image: dockersamples/examplevotingapp_worker
    depends_on:
      - redis
      - db
    networks:
    - frontend
    - backend
    deploy:
      mode: replicated # global for deploy in all nodes (~ daemonset)
      replicas: 1 
      labels: [APP=VOTING]
      restart_policy:
        condition: on-failure
        delay: 10s
        max_attempts: 3
        window: 120s
      placement:
        constraints: [node.role == manager]
  
  visualizer:
    image: dockersamples/visualizer:stable
    ports:
      - "8080:8080"
    volumes:
      - "/var/run/docker.sock:/var/run/docker.sock"
    stop_grace_period: 30s
    deploy:
      placement: 
        constraints: [node.role == manager]

networks:
  frontend:
  backend: 
volumes:
  db_data:
